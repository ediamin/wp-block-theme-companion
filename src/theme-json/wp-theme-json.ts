import getCustomVariables from './get-custom-variables';
import PRESETS_METADATA from './presets-metadata';
import setCoreSpacingSizes from './set-core-spacing-sizes';

import type {
	CssVariableAggregatorItems,
	DataSource,
	PresetMetadata,
	SettingsProperties,
	ThemeJson,
} from '../types';

function aggregateAutoCompletionItems(
	source: DataSource,
	presetMetadata: PresetMetadata,
	presets: Record< string, any >[],
	cssVariableAggregatorItems: CssVariableAggregatorItems,
	themeJson: ThemeJson
): CssVariableAggregatorItems {
	presets.forEach( ( preset: Record< string, any > ) => {
		let value = '';

		if ( presetMetadata.valueKey ) {
			value = preset[ presetMetadata.valueKey ];
		}

		if ( presetMetadata.valueFunc ) {
			value = presetMetadata.valueFunc( themeJson, preset );
		}

		const variable = presetMetadata.cssVars.replace( '$slug', preset.slug );
		cssVariableAggregatorItems[ variable ] = {
			source,
			value,
			preset,
			kind: presetMetadata.kind,
			detail: presetMetadata.detail,
		};
	} );

	return cssVariableAggregatorItems;
}

async function wpThemeJson( themeJson: ThemeJson ) {
	const { settings } = themeJson;
	let cssVariableAggregatorItems: CssVariableAggregatorItems = {};

	const coreThemeJson = ( await import( './theme.json' ) ) as ThemeJson;
	let { settings: coreSettings } = coreThemeJson;

	coreSettings = setCoreSpacingSizes( coreSettings as SettingsProperties, settings as SettingsProperties );

	PRESETS_METADATA.forEach( ( presetMetadata ) => {
		// @todo: Work on this type.
		// @ts-ignore
		const { corePresets, presets } = presetMetadata.path.reduce(
			// @ts-ignore
			( settingsObjects, path ) => {
				return {
					corePresets: settingsObjects.corePresets?.[ path ] ?? [],
					presets: settingsObjects.presets?.[ path ] ?? [],
				};
			},
			{ corePresets: coreSettings, presets: settings }
		);

		// Generated by the core theme.json.
		cssVariableAggregatorItems = aggregateAutoCompletionItems(
			'core',
			presetMetadata,
			corePresets,
			cssVariableAggregatorItems,
			themeJson
		);

		// Generated by the custom or user defined theme.json.
		cssVariableAggregatorItems = aggregateAutoCompletionItems(
			'theme',
			presetMetadata,
			presets,
			cssVariableAggregatorItems,
			themeJson
		);
	} );

	cssVariableAggregatorItems = getCustomVariables( themeJson, cssVariableAggregatorItems );

	return {
		cssVariableAggregatorItems,
	};
}

export default wpThemeJson;
